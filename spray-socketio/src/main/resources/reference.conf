###################################
# spray-socketio Reference Config File #
###################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

akka {
  actor {
    serializers {
      frame = "spray.contrib.socketio.serializer.FrameSerializer"
      packet = "spray.contrib.socketio.serializer.PacketSerializer"
      connctx = "spray.contrib.socketio.serializer.ConnectionContextSerializer"
      state = "spray.contrib.socketio.serializer.ConnectionSessionStateSerializer"
      conncmd = "spray.contrib.socketio.serializer.ConnectionSessionCommandSerializer"
      onpacket = "spray.contrib.socketio.serializer.OnPacketSerializer"
      onbroadcast = "spray.contrib.socketio.serializer.OnBroadcastSerializer"
      status = "spray.contrib.socketio.serializer.StatusSerializer"
      namespaceevt = "spray.contrib.socketio.serializer.NamespaceEventSerializer"
    }
    serialization-bindings {
      "spray.can.websocket.frame.Frame" = frame
      "spray.contrib.socketio.packet.Packet" = packet
      "spray.contrib.socketio.ConnectionContext" = connctx
      "spray.contrib.socketio.ConnectionSession$State" = state
      "spray.contrib.socketio.ConnectionSession$Command" = conncmd
      "spray.contrib.socketio.ConnectionSession$OnPacket" = onpacket
      "spray.contrib.socketio.ConnectionSession$OnBroadcast" = onbroadcast
      "spray.contrib.socketio.ConnectionSession$Status" = status
      "spray.contrib.socketio.namespace.Namespace$Event" = namespaceevt
    }
  }
}

spray.websocket {
  # Supported Per-message Compression Extensions. To disable, set to []
  # pmce = ["permessage-deflate"]
  pmce = []
}

spray.socketio {

  # "local" or "cluster"
  mode = "local"

  scheduler {
    tick-duration = 10 ms
    ticks-per-wheel = 512
  }

  server {
    supported-transports = "websocket,xhr-polling"

    # seconds of server heartbeat send interval
    # socketio.js will disclose connection strictly according to both heartbeatTimeout and closeTimeout,
    # we have to give heartbeatInterval some loose for example 30s for network delivering time.
    heartbeat-interval = 30

    # seconds. Send to client as protocol part, client will use it to decide if server is unavailable.
    heartbeat-timeout = 60

    # seconds. 
    # Used by server to decide if client is also available, start countdown when a heartbeat sent
    # Send to client as protocol part, client will use it to decide if server is unavailable.
    close-timeout = 60

    # seconds. 
    # Used by server to decide if connectionSession should stop/exit.
    idle-timeout = 7200

    # seconds
    actor-selection-resolve-timeout = 10

    # seconds
    namespace-subscribe-timeout = 30

    enable-connectionsession-persistence = false
  }

  seed-nodes = []

  routing-logic = "consistent-hashing"
}


spray.socketio.benchmark {

  server {
    host = "localhost"
    port = 8080
  }

  client {
    addresses = ["localhost:8080"]

    concurrencyLevels = [10, 100, 500, 1000, 2000, 5000, 10000, 30000]

    post-test-reception-timeout = 5

    create-bunch-clients-timeout = 30

    initail-messages-sent-per-second = 1

    max-messages-sent-per-second = 200000

    messages-sent-per-second-ramp = 100

    seconds-to-test-each-load-state = 1

    seconds-between-rounds = 2
  }

  broadcast = false
}
